apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    PUBLISH_GROUP_ID = 'io.github.windysha'
    PUBLISH_ARTIFACT_ID = 'xposed_module_loader'
    PUBLISH_ARTIFACT_NAME = 'Xposed Module Loader.'
    PUBLISH_VERSION_NAME = '1.0.3'

    POM_URL = 'https://github.com/WindySha/xposed_module_loader'
    POM_DESCRIPTION = 'This is a library that can load xposed module from any path or installed xposed module.'

    POM_DEVELOPER_ID = 'WindySha'
    POM_DEVELOPER_NAME = 'WindySha'
    POM_DEVELOPER_EMAIL = '819170366@qq.com'
    POM_DEVELOPER_URL = 'https://windysha.github.io/'

    POM_SCM_URL = 'https://github.com/WindySha/xposed_module_loader/tree/master'
    POM_SCM_CONNECTION = 'scm:git:https://github.com/WindySha/xposed_module_loader.git'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('maven_signing.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}
publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION_NAME

            afterEvaluate {
                artifact tasks.getByName("bundleReleaseAar")
                artifact androidSourcesJar
            }

            // Two artifacts, the `aar` and the sources
//            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
//            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_NAME
                description = POM_DESCRIPTION
                url = POM_URL
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                        url = POM_DEVELOPER_URL
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_CONNECTION
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                // https://github.com/kezong/fat-aar-android/issues/45
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Iterate over the compile dependencies, adding a <dependency> node for each
                    project.configurations.implementation.allDependencies.each {
                        def hasGroup = it.group != null
                        def hasName = (it.name != null || "unspecified".equals(it.name))
                        def hasVersion = it.version != null

                        if (hasGroup && hasName && hasVersion) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "mavenCentral"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}
//  https://s01.oss.sonatype.org/#stagingRepositories
// publish dst: https://repo.maven.apache.org/maven2/io/github/windysha/xposed_module_loader/